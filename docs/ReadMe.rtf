{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww13160\viewh9040\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 The project scripts parse B-records from an *.igc file, and return json, csv and wpt files with lat/lon coordinates and ancillary data. T\
\

\f1\b circles_from_brecords_v*.py
\f0\b0  parses Brecords for time, lat/lon and altitude, and this sequence is searched for both circling patterns and sustained altitude gain, returning 
\f1\b circles.csv
\f0\b0  \
\

\f1\b circle_clusters_v1s.py
\f0\b0  uses DBScan to find clusters in 
\f1\b circles.csv
\f0\b0 , ie sets of circles overlapping in time and space, via a filter using configurable tunings, returning 
\f1\b circle_clusters_enriched.csv
\f0\b0 \
\

\f1\b altitude_clusters_v1.py
\f0\b0  parses the Brecords for segments of altitude gain, also named \'91clusters\'92 for consistency, also tunable, returning 
\f1\b altitude_clusters.csv
\f0\b0 \
\
Altitude clusters and circle clusters do not necessarily coincide; 
\f1\b match_clusters_v1.py
\f0\b0  compares 
\f1\b circle_clusters_enriched.csv 
\f0\b0 and
\f1\b  altitude_clusters.csv 
\f0\b0 for overlap in time and space, returning 
\f1\b matched_clusters.csv 
\f0\b0 which indicate circling in rising air.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 pipeline_v*.py
\f0\b0  runs each upstream script in turn, analysing a single igc file and returning 
\f1\b matched_clusters.csv 
\f0\b0  \
\
The scripts can also be run individually. 
\f1\b circles_from_brecords_v*.py 
\f0\b0  is a fast script that can be used to help adjust tuning settings for batch runs. 
\f1\b circle_clusters_v1s.py
\f0\b0  requires its output, 
\f1\b circles.csv
\f0\b0 , while 
\f1\b match_clusters_v1.py
\f0\b0  requires the output from both the clustering scripts.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
The scripts also be run from 
\f1\b batch_run_v*.py 
\f0\b0  which processes inputs multiple *.igc files in a folder (default \'91igc\'92), returning csv files for each *.igc file to the folder o
\f1\b utputs/batch_csv/*.igc_stem\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 pipeline_v*.py 
\f0\b0 is intended to analyse a single *.igc file. 
\f1\b batch_run_v*.py 
\f0\b0 is intended for analysing batches of many (hundreds of) *.igc files to generate coordinates of likely thermals based on empirical flight data.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 thermal_waypoints_v1.* 
\f0\b0 runs an additional clustering filter across 
\f1\b matched_clusters.csv, u
\f0\b0 sing, optionally ,DBScan, HDBScan or Optics with tunable settings, and returns  csv, geojson and wpt files. This final clustering filter groups coordinates of 
\f1\b matched_clusters
\f0\b0  within a radius of each other (default 5km). These coordinates can be mapped by Google Earth or loaded as waypoints in a flight instrument as areas of thermal hotspots.\
\
The scripts read their settings from 
\f1\b tuning.json
\f0\b0  which is written by 
\f1\b tuning_params_configurator_v1.py
\f0\b0  which returns interactive prompts with defaults to console, enabling quick tuning of the filters in all scripts.\
\
The scripts run from the repository root, and output to folders they create in \'91outputs/\'91. \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 circles_from_brecords_v*.py
\f0\b0  also outputs circle diameter, average speed and bank angle to the data frame/
\f1\b circles.csv}